package com.tcl.easybill.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tcl.easybill.pojo.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Integer> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", true, "ID");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property PASSWORD = new Property(2, int.class, "PASSWORD", false, "PASSWORD");
        public final static Property Gender = new Property(3, int.class, "gender", false, "GENDER");
        public final static Property Phonenumber = new Property(4, int.class, "phonenumber", false, "PHONENUMBER");
        public final static Property Budget = new Property(5, Float.class, "budget", false, "BUDGET");
        public final static Property Shareid = new Property(6, int.class, "shareid", false, "SHAREID");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: ID
                "\"NAME\" TEXT," + // 1: NAME
                "\"PASSWORD\" INTEGER NOT NULL ," + // 2: PASSWORD
                "\"GENDER\" INTEGER NOT NULL ," + // 3: gender
                "\"PHONENUMBER\" INTEGER NOT NULL ," + // 4: phonenumber
                "\"BUDGET\" REAL," + // 5: budget
                "\"SHAREID\" INTEGER NOT NULL );"); // 6: shareid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
        stmt.bindLong(3, entity.getPASSWORD());
        stmt.bindLong(4, entity.getGender());
        stmt.bindLong(5, entity.getPhonenumber());
 
        Float budget = entity.getBudget();
        if (budget != null) {
            stmt.bindDouble(6, budget);
        }
        stmt.bindLong(7, entity.getShareid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
        stmt.bindLong(3, entity.getPASSWORD());
        stmt.bindLong(4, entity.getGender());
        stmt.bindLong(5, entity.getPhonenumber());
 
        Float budget = entity.getBudget();
        if (budget != null) {
            stmt.bindDouble(6, budget);
        }
        stmt.bindLong(7, entity.getShareid());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NAME
            cursor.getInt(offset + 2), // PASSWORD
            cursor.getInt(offset + 3), // gender
            cursor.getInt(offset + 4), // phonenumber
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // budget
            cursor.getInt(offset + 6) // shareid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPASSWORD(cursor.getInt(offset + 2));
        entity.setGender(cursor.getInt(offset + 3));
        entity.setPhonenumber(cursor.getInt(offset + 4));
        entity.setBudget(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setShareid(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Person entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public Integer getKey(Person entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
